import 'dart:convert';

import 'package:flutter/material.dart';

import '../../../bloc/BlocEvent/04-01-P4ORDERHISTORYGETDATA.dart';
import '../P4ORDERHISTORYVAR.dart';

class P04ORDERDETAILMAIN extends StatefulWidget {
  P04ORDERDETAILMAIN({
    super.key,
    this.data,
  });
  dynamic? data;
  @override
  _P04ORDERDETAILMAINState createState() => _P04ORDERDETAILMAINState();
}

class _P04ORDERDETAILMAINState extends State<P04ORDERDETAILMAIN> {
  List<DEATAILOrderclass> orders = [];

  @override
  void initState() {
    super.initState();
    _loadSampleData();
  }

  void _loadSampleData() {
    orders = modelDEATAILOrderclassFromJson(jsonEncode(widget.data));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Order Management'),
        backgroundColor: Colors.blue[700],
        foregroundColor: Colors.white,
        elevation: 2,
      ),
      body: Container(
        color: Colors.grey[100],
        child: ListView.builder(
          padding: EdgeInsets.all(16),
          itemCount: 1,
          itemBuilder: (context, index) {
            return OrderCard(
              order: orders,
            );
          },
        ),
      ),
    );
  }
}

class OrderCard extends StatefulWidget {
  List<DEATAILOrderclass> order;

  OrderCard({required this.order});

  @override
  _OrderCardState createState() => _OrderCardState();
}

class _OrderCardState extends State<OrderCard> {
  bool isExpanded = false;
  @override
  Widget build(BuildContext context) {
    List<DEATAILOrderclass> _dataIn = widget.order ?? [];
    return Card(
      margin: EdgeInsets.only(bottom: 16),
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Column(
        children: [
          // Order Header
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: _getStatusColor(_dataIn[0].Order_Status),
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(12),
                topRight: Radius.circular(12),
              ),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Order #${_dataIn[0].OrderNo}',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        '${_dataIn[0].ProductName}',
                        /* - ${_dataIn[0].Tank} */
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    _dataIn[0].Order_Status,
                    style: TextStyle(
                      color: _getStatusColor(_dataIn[0].Order_Status),
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
          ),

          // Order Details
          Container(
            padding: EdgeInsets.all(16),
            child: Column(
              children: [
                _buildInfoRow('Lot', _dataIn[0].Lot),
                _buildInfoRow(
                    'Quantity', '${_dataIn[0].Quantity} ${_dataIn[0].UOM}'),
                _buildInfoRow(
                    'SAP Start Date', formatDate(_dataIn[0].Order_Start_DT)),
                _buildInfoRow('SAP Picking Date',
                    formatDate(_dataIn[0].Order_Picking_DT)),
                _buildInfoRow(
                    'SAP Finish Date', formatDate(_dataIn[0].Order_Finish_DT)),
                _buildInfoRow('Generated by',
                    '${_dataIn[0].User_Gen}  (${formatDateTime(_dataIn[0].Time_Gen)})'),
                _buildInfoRow('Recheck by',
                    '${_dataIn[0].Recheck_User}  (${formatDateTime(_dataIn[0].Recheck_Time)})'),
                _buildInfoRow('Send To SAP by',
                    '${_dataIn[0].User_Complete}  (${formatDateTime(_dataIn[0].Complete_Time)})'),

                SizedBox(height: 16),

                // Materials Header
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Raw Materials List',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.grey[800],
                      ),
                    ),
                    IconButton(
                      icon: Icon(
                        isExpanded ? Icons.expand_less : Icons.expand_more,
                        color: Colors.blue[700],
                      ),
                      onPressed: () {
                        setState(() {
                          isExpanded = !isExpanded;
                        });
                      },
                    ),
                  ],
                ),
              ],
            ),
          ),

          // Materials List
          Container(
            padding: EdgeInsets.only(left: 16, right: 16, bottom: 16),
            child: Column(children: [
              ..._dataIn.map((data) {
                return MaterialCard(order: data);
              })
            ]),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 200,
            child: Text(
              '$label:',
              style: TextStyle(
                fontWeight: FontWeight.w600,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: Colors.grey[800],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getStatusColor(String status) {
    switch (status.toUpperCase()) {
      case 'COMPLETE':
        return Colors.green[600]!;
      case 'PENDING':
        return Colors.orange[600]!;
      case 'IN_PROGRESS':
        return Colors.blue[600]!;
      default:
        return Colors.grey[600]!;
    }
  }
}

class MaterialCard extends StatelessWidget {
  final DEATAILOrderclass order;

  MaterialCard({required this.order});

  @override
  Widget build(BuildContext context) {
    DEATAILOrderclass _dataIn = order;
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '${_dataIn.Mat_Name} (${_dataIn.Mat_CP})',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                  color: Colors.grey[800],
                ),
              ),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: _getMatStatusColor(_dataIn.Mat_Status),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  _dataIn.Mat_Status,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          Text(
            'Quantity: ${_dataIn.Mat_Quantity} ${_dataIn.Mat_UOM}',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 14,
              color: Colors.grey[800],
            ),
          ),
          SizedBox(height: 8),
          Text(
            'SAP',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 14,
              color: Colors.grey[800],
            ),
          ),
          Row(
            children: [
              Expanded(
                child: _buildMatInfoColumn([
                  'Lot 1: ${_dataIn.Mat_SAP_Lot1}',
                  'Qty 1: ${_dataIn.Mat_SAP_QTY1}',
                ]),
              ),
              Expanded(
                child: _buildMatInfoColumn([
                  'Lot 2: ${_dataIn.Mat_SAP_Lot2}',
                  'Qty 2: ${_dataIn.Mat_SAP_QTY2}',
                ]),
              ),
              Expanded(
                child: _buildMatInfoColumn([
                  'Lot 3: ${_dataIn.Mat_SAP_Lot3}',
                  'Qty 3: ${_dataIn.Mat_SAP_QTY3}',
                ]),
              ),
            ],
          ),
          if (_dataIn.Full_Array.isNotEmpty) ...{
            SizedBox(height: 8),
            Text(
              'ARM FULL SYSTEM',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
                color: Colors.grey[800],
              ),
            ),
            ..._dataIn.Full_Array.map((Full_Array) {
              return Row(
                children: [
                  Expanded(
                    child: _buildMatInfoColumn([
                      'Actaul Weight : ${Full_Array['Act']}',
                    ]),
                  ),
                  Expanded(
                    child: _buildMatInfoColumn([
                      'Preset Pallet Weight: ${Full_Array['Pallet']}',
                    ]),
                  ),
                  Expanded(
                    child: _buildMatInfoColumn([
                      'Tare Weight: ${Full_Array['Tare']}',
                    ]),
                  ),
                ],
              );
            }),
            Padding(
              padding: EdgeInsets.only(top: 8),
              child: Text(
                'Handled by: ${_dataIn.User_Full} (${formatDateTime(_dataIn.Time_Full)})',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                  fontStyle: FontStyle.italic,
                ),
              ),
            ),
          },
          if (_dataIn.Sep_Array.isNotEmpty) ...{
            SizedBox(height: 8),
            Text(
              'ARM SEPERATE SYSTEM',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
                color: Colors.grey[800],
              ),
            ),
            ..._dataIn.Sep_Array.map((Sep_Array) {
              return Row(
                children: [
                  Expanded(
                    child: _buildMatInfoColumn([
                      'Actaul Weight : ${Sep_Array['Act']}',
                    ]),
                  ),
                  Expanded(
                    child: _buildMatInfoColumn([
                      'Tare Weight: ${Sep_Array['Tare']}',
                    ]),
                  ),
                  Expanded(
                    child: _buildMatInfoColumn([
                      '',
                    ]),
                  ),
                ],
              );
            }),
            Padding(
              padding: EdgeInsets.only(top: 8),
              child: Text(
                'Handled by: ${_dataIn.User_Compare} (${formatDateTime(_dataIn.Time_Compare)})',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                  fontStyle: FontStyle.italic,
                ),
              ),
            ),
          }
        ],
      ),
    );
  }

  Widget _buildMatInfoColumn(List<String> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: items
          .map((item) => Padding(
                padding: EdgeInsets.symmetric(vertical: 2),
                child: Text(
                  item,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey[700],
                  ),
                ),
              ))
          .toList(),
    );
  }

  Color _getMatStatusColor(String status) {
    switch (status) {
      case 'All_Full':
        return Colors.green[600]!;
      case 'Auto':
        return Colors.blue[600]!;
      default:
        return Colors.grey[600]!;
    }
  }
}
